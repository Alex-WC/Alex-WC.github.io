<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法复杂度分析</title>
    <url>/2020/05/12/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>一个好的程序员，一定会追求优美、优雅、高效的代码，优美优雅需要时间积累以及业务的耦合拆分来完成。而高效，却是可以通过代码分析做到，让你的代码<strong>多快好省</strong>的执行，这就是这篇文章要讲的主题：<strong>时间、空间复杂度</strong></p>
<a id="more"></a>

<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>注意：代码执行时间的表示，一般用 <strong>T(n) = O(f(n))</strong> 表示。其中T(n)表示代码的总执行时间，f(n) 是代码行数的和，一般会是一个公式，而O表示T(n)和f(n)成正比，由O来标记复杂度。例如：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum(int n) &#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (;i &lt; n;i ++) &#123;</span><br><span class="line">        sum +&#x3D; i;</span><br><span class="line">    &#125; </span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述代码片段，f(n) = 2n + 2，所以代码执行时间取决于n的大小，当n很大时，公式中的低级和常量都可以忽略不计。所以上述代码的执行时间可以表示为：T(n) = O(n)，描述为<strong>算法的时间复杂度为O(n)</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int 0 &#x3D; 0</span><br></pre></td></tr></table></figure>
<p>我的天啊</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2>]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>
