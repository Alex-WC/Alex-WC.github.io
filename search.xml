<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法复杂度分析</title>
    <url>/2020/05/12/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>一个好的程序员，一定会追求优美、优雅、高效的代码，优美优雅需要时间积累以及业务的耦合拆分来完成。而高效，却是可以通过代码分析做到，让你的代码<strong>多快好省</strong>的执行，这就是这篇文章要讲的主题：<strong>时间、空间复杂度</strong></p>
<a id="more"></a>

<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><blockquote>
<p>注意：代码执行时间的表示，一般用 <strong>T(n) = O(f(n))</strong> 表示。其中T(n)表示代码的总执行时间，f(n) 是代码行数的和，一般会是一个公式，而O表示T(n)和f(n)成正比，由O来标记复杂度。例如：<br> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;i &lt; n;i ++) &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述代码片段，f(n) = 2n + 2，所以代码执行时间取决于n的大小，当n很大时，公式中的低阶、系数和常量都可以忽略不计。所以上述代码的执行时间可以表示为：T(n) = O(n)，描述为<strong>算法的时间复杂度为O(n)</strong>。</p>
</blockquote>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>现在来看一下，从那几个角度来分析时间复杂度：</p>
<h4 id="只关注循环执行次数最多的一段"><a href="#只关注循环执行次数最多的一段" class="headerlink" title="只关注循环执行次数最多的一段"></a>只关注循环执行次数最多的一段</h4><p>上面说过，时间复杂度忽略低阶参数，只需要记录最大阶的数，所以我们在分析一段代码的时间复杂度，只需要关注循环次数最多的部分。上述代码的2、3行，都是常量级别的执行时间，4、5被执行的n次，所以时间复杂度就是O(n)。</p>
<h4 id="加法法则"><a href="#加法法则" class="headerlink" title="加法法则"></a>加法法则</h4><p>当一段代码中，有多个循环体，那么总复杂度为量级最大的那段，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;i &lt; n;i ++) &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p &lt; n;p ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;q &lt; n;q ++) &#123;</span><br><span class="line">            sum2 = sum2 + q * p;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析上述两个代码片段可知，复杂度分别为O(n)和O(n²)，我们取其中最大的量级就是O(n²)，也就是说：<strong>总的时间复杂度等于量级最大的时间复杂度</strong>，如果用公式表示，便是T(n) = f(n) + g(n) = Max(O(f(n)) + O(g(n)));</p>
<h3 id="几种常见的复杂度"><a href="#几种常见的复杂度" class="headerlink" title="几种常见的复杂度"></a>几种常见的复杂度</h3><ol>
<li>O(1) </li>
<li>O(logn)、O(nlogn)</li>
</ol>
<p>其中1很好理解，代码中没有任何递归、循环，哪怕有上万行代码，复杂度也是O(1)</p>
<p>2需要注意一个点，看实际代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设该代码的执行次数为X，则可得方程</p>
<blockquote>
<p>1 * 2 * 2² * 2³ …2<sup>x</sup> = n，那么x = log<sub>2</sub>n</p>
</blockquote>
<p>所以复杂度为O(log<sub>2</sub>n)，底数可以很任意底数进行转换，所以视为常数进行省略，这种复杂度都为<strong>O(logn)</strong></p>
<p>常见的时间复杂度由从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)，可以所以要追求卓越，要尽可能让自己的算法，往低阶靠齐。</p>
<h4 id="乘法法则"><a href="#乘法法则" class="headerlink" title="乘法法则"></a>乘法法则</h4><p>阅读能力强的人，可以在加法法则中发现，第二段代码就是一个循环嵌套，拆分成两个循环，计算复杂度便是乘法，也就是T1(n) = O(n)，T2(n) = O(n)，则 T1(n) * T2(n) = O(n²)。</p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>空间复杂度的分析相对时间复杂度要简单很多，就是分析代码申请了多少存储空间，这里不扩展开来了。</p>
<p>欢迎留言，进行交流</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>typealias -更清晰的swift代码</title>
    <url>/2020/06/01/typealias/</url>
    <content><![CDATA[<p>为了使代码更加清晰，简洁，使用<code>typealias</code>是很好的方法之一。它会让你的代码，易读性更强。例如<code>TimeInterval</code>，一眼便可以认出是时间间隔的定义，如果用<code>Double</code>，你可能还需要看一下变量定义才能理解含义，这就是别名的优势之一。</p>
<a id="more"></a>

<h3 id="什么是typealias"><a href="#什么是typealias" class="headerlink" title="什么是typealias"></a>什么是typealias</h3><p>顾名思义，<code>typealias</code>就是给特定类型起一个别名。例如<code>Int</code>、<code>UIView</code>,等，你都可以起一个别名来定义，使得含义更加明显，例如</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">TimeInterval</span> = <span class="type">Double</span></span><br></pre></td></tr></table></figure>

<p>本质是一个<code>Double</code>，重新定义后便拥有的<strong>时间间隔</strong>的含义，代码阅读起来也更加流畅。但是请注意，<code>Int32</code>和<code>Int64</code>并不是同一类型。一般来说，我们不需要特意指定Int类型的字长，使用<code>Int</code>来表示，在不同的平台上会有不同的字长。</p>
<h4 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h4><p>上面提到，<code>typealias</code>只是起了别名，本质还是一样，所以类型别名也是可以具有泛型参数的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">MyArray</span>&lt;<span class="type">T</span>&gt; = <span class="type">Array</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line"><span class="keyword">let</span> newArray: <span class="type">MyArray</span> = <span class="type">MyArray</span>(arrayLiteral: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>上述案例为常规数组定义了一个新的<code>MyArray</code>，一样具备泛型特性。同样的，如果约束参数也是可以做到，比如希望T是遵循<code>StringProtocol</code>类型的：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">MyArray</span> = <span class="type">Array</span> <span class="keyword">where</span> <span class="type">T</span>: <span class="type">StringProtocol</span></span><br></pre></td></tr></table></figure>

<p>这样子，就可以快速为特定类型定义数组，而不用将<code>Array</code>子类化。这也是符合swift语言特性的。</p>
<h3 id="实践应用"><a href="#实践应用" class="headerlink" title="实践应用"></a>实践应用</h3><h4 id="更清晰的代码"><a href="#更清晰的代码" class="headerlink" title="更清晰的代码"></a>更清晰的代码</h4><p>别名可以使代码更具含义，上面<code>TimeInterval</code>的已经讲过，在<code>typealias TimeInterval = Double</code>中，<code>TimeInterval</code>含义更清晰，相比<code>let time : Double = 0.0</code>更容易理解。</p>
<h4 id="更简单的可选闭包"><a href="#更简单的可选闭包" class="headerlink" title="更简单的可选闭包"></a>更简单的可选闭包</h4><p>在swift中，定义一个闭包会显的有点臃肿，比如定义一个参数一个返回值的闭包常规定义如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(callback:<span class="params">(Int)</span></span></span>-&gt;<span class="type">Int</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>此时如果闭包是可选的，则会变为：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(callback: <span class="params">(<span class="params">(Int)</span></span></span></span> -&gt; <span class="type">Int</span>)?) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这样子参数一旦变多，可读性会非常的差，比如成功、失败、进行中的操作，代码会变成：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(success: <span class="params">(<span class="params">(Int)</span></span></span></span> -&gt; <span class="type">Int</span>)?,</span><br><span class="line">            failure: ((<span class="type">Error</span>) -&gt; <span class="type">Void</span>)?,</span><br><span class="line">            progress: ((<span class="type">Double</span>) -&gt; <span class="type">Void</span>)?) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然，这个看起来很很令人头痛，上面只是一个参数，如果参数在多一下，怕是没人想接手你的代码进行维护了，所以我们可以通过不同闭包起类型别名来解决这个问题：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Success</span> = (<span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Failure</span> = (<span class="type">Error</span>) -&gt; <span class="type">Void</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Progress</span> = (<span class="type">Double</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(success: Success?, </span></span></span><br><span class="line"><span class="function"><span class="params">            failure: Failure?, </span></span></span><br><span class="line"><span class="function"><span class="params">            progress: Progress?)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码，哪怕是后续参数变动，改动也是很方便的。</p>
<h4 id="像函数一样的元组"><a href="#像函数一样的元组" class="headerlink" title="像函数一样的元组"></a>像函数一样的元组</h4><p>此时我们可以通过泛型和元组，不一定需要用结构体。例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Generation</span>&lt;<span class="type">T</span>: <span class="type">Numeric</span>&gt; = (initial: <span class="type">T</span>, seed: <span class="type">T</span>, <span class="built_in">count</span>: <span class="type">Int</span>, current: <span class="type">T</span>)</span><br><span class="line"><span class="comment">// 使用时只需要</span></span><br><span class="line"><span class="keyword">let</span> firstGeneration = <span class="type">Generation</span>(initial: <span class="number">10</span>, seed: <span class="number">42</span>, <span class="built_in">count</span>: <span class="number">0</span>, current: <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>尽管它看起来确实像一个结构体，但它只是一个元组的类型别名。</p>
<h4 id="组合协议"><a href="#组合协议" class="headerlink" title="组合协议"></a>组合协议</h4><p>有一种场景，需要不同的对象实现多个协议，这时候若使用组合协议来重新定义，会提高灵活性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanRead</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanWrite</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CanCreateUser</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Administrator</span> = <span class="type">CanRead</span> &amp; <span class="type">CanWrite</span> &amp; <span class="type">CanCreateUser</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">User</span> = <span class="type">CanRead</span> &amp; <span class="type">CanWrite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Consumer</span> = <span class="type">CanRead</span></span><br></pre></td></tr></table></figure>

<p>如上述，定义了读写和操作用户的行为的协议，不同的对象拥有不同的行为。这样子就等于定义了权限层，管理员可以做任何事，用户可以读写，而消费者只能读。</p>
<h4 id="不完美处"><a href="#不完美处" class="headerlink" title="不完美处"></a>不完美处</h4><p><code>typealias</code>是一个很棒的功能，我本人应用很广泛，但是会出现一个问题，很多定义是额外工作，使得我同事在操作我的代码时，要有额外的查询动作，比如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">first</span><span class="params">(action: <span class="params">(Int, Error?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">second</span><span class="params">(action: Success)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>第一个是直接就能看出来参数和类型的，而第二个是需要跳到<code>Success</code>处来查看定义的。所以具体的使用场景，还需要取舍有度才行。</p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
</search>
